@inject HttpClient httpClient
@inject VideoJS videoJS
@inject NavigationManager navigationManager

<style>
    #camera{
        position: relative;
    }
    #camera video{
        height: 200px;
        width: 200px;
    }
</style>


<div class="VideoChatComponentContainer">
    @if (GroupDTO == null)
    {
        <h3>Please select a learning Group</h3>
    }
    else
    {
        <h3>@GroupDTO.Name</h3>
    }
    <CameraSelectorComponent CameraChanged="camera => activeCamera = camera" />
    @if (!isVideoChatting)
    {
        <button @onclick="async () => await TryJoinRoomAsync(GroupDTO.Id.ToString())">Join Video Chat</button>
    }
    else
    {
        <button @onclick="async () => await OnLeaveRoom()">Leave Video Chat</button>
    }
    <div id="camera">
        <div></div>
    </div>
    <div id="participants"></div>
</div>


@code{
    [Parameter]
    public GroupDTO GroupDTO { get; set; }
    private List<MessagesDTO> messagesDTOs;
    private string activeCamera;
    private bool isVideoChatting;
    protected override async Task OnParametersSetAsync()
    {
        if(GroupDTO != null)
        {
            await GetMessagesLearningNotes();
        }
    }

    public async Task GetMessagesLearningNotes()
    {
        messagesDTOs = await httpClient.GetFromJsonAsync<List<MessagesDTO>>($"/api/group/MessagesForGroup/{GroupDTO?.Id}");
    }

    private async ValueTask OnLeaveRoom()
    {
        await videoJS.LeaveRoomAsync();
        await videoJS.StartVideoAsync(activeCamera, "#camera");
    }

    private async ValueTask<bool> TryJoinRoomAsync(string roomName)
    {
        var jwt = await httpClient.GetFromJsonAsync<TwilioJWTDTO>("api/twilio/token");
        if (jwt?.Token is null)
        {
            return false;
        }

        var joined = await videoJS.CreateOrJoinRoomAsync(roomName, jwt.Token);
        if (joined)
        {
            isVideoChatting = true;
        }

        return joined;
    }
}
