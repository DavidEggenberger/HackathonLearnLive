@inject HttpClient httpClient
@inject VideoJS videoJS
@inject NavigationManager navigationManager
@implements IAsyncDisposable 
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider authProvider

<style>
    #camera{
        position: relative;
    }
    #camera video{
        width: 300px;
    }
    .CameraName{
        position: absolute;
        bottom: 5px;
        left: 5px;
    }
    button {
        padding: 3px;
        border: 2px solid white;
        outline: none;
        border-radius: 5px;
        background-color: rgba(255, 255, 255, 0.3);
        color: white;
        font-size: 20px;
    }
</style>


<div class="VideoChatComponentContainer" style="height: calc(100% - 200px);">
    @if (GroupDTO == null)
    {
        <div class="GroupHeader">
            <h3>Select a learning group to see its chat and video call</h3>
        </div>
    }
    else
    {
        <div class="GroupHeader">
            <h3>@GroupDTO.Name</h3>
        </div>
    }
    @if (GroupDTO != null)
    {
        <div style="padding-top: 10px; box-sizing: border-box; width: 100%; display: grid; grid-template-columns: 1fr 300px;">
            <div style="height: 100%;">
                <CameraSelectorComponent CameraChanged="camera => activeCamera = camera" />
                    <AuthorizeView>
                        <Authorized>
                            @if (!isVideoChatting && activeCamera == null)
                            {
                                <button>Select Camera to Join Video Chat</button>
                            }
                            else if (activeCamera != null)
                            {
                                <button @onclick="async () => await TryJoinRoomAsync(GroupDTO.Id.ToString())">Join Video Chat</button>
                            }
                            else
                            {
                                <button @onclick="async () => await OnLeaveRoom()">Leave Video Chat</button>
                            }
                        </Authorized>
                        <NotAuthorized>
                            <button @onclick="() => ((HostAuthenticationStateProvider)authProvider).SignIn()"Login to join video Chat></button>
                        </NotAuthorized>
                    </AuthorizeView>
                <div class="ChatContainer">

                </div>
            </div>
            <div style="height: 100%;">
                <div id="camera">
                    @if (activeCamera != null)
                    {
                        <div class="CameraName">YourSelf</div>
                    }
                </div>
                <div id="participants"></div>
            </div>           
        </div>     
    }
</div>


@code{
    [Parameter]
    public GroupDTO GroupDTO { get; set; }
    private List<MessagesDTO> messagesDTOs;
    private string activeCamera;
    private bool muted;
    private bool isVideoChatting;
    protected override async Task OnParametersSetAsync()
    {
        if(GroupDTO != null)
        {
            await GetMessagesLearningNotes();
        }
    }

    public async Task GetMessagesLearningNotes()
    {
        messagesDTOs = await httpClient.GetFromJsonAsync<List<MessagesDTO>>($"/api/group/MessagesForGroup/{GroupDTO?.Id}");
    }

    private async ValueTask OnLeaveRoom()
    {
        await videoJS.LeaveRoomAsync();
        //await videoJS.StartVideoAsync(activeCamera, "#camera");
        isVideoChatting = false;
    }

    private async ValueTask<bool> TryJoinRoomAsync(string roomName)
    {
        var jwt = await httpClient.GetFromJsonAsync<TwilioJWTDTO>("api/twilio/token");
        if (jwt?.Token is null)
        {
            return false;
        }

        var joined = await videoJS.CreateOrJoinRoomAsync(roomName, jwt.Token);
        if (joined)
        {
            isVideoChatting = true;
        }

        return joined;
    }

    public async ValueTask DisposeAsync()
    {
        await OnLeaveRoom();
    }
}
